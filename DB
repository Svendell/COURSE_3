-- Создание последовательности для генерации уникальных идентификаторов для отзывов
CREATE SEQUENCE seq_Отзывы
    START WITH 1
    INCREMENT BY 1
    MINVALUE 1
    NO MAXVALUE
    NOCYCLE;

-- Создание таблицы Роль
CREATE TABLE Роль (
    ID NUMBER PRIMARY KEY,
    Роль VARCHAR2(100)
);

-- Создание таблицы Категории
CREATE TABLE Категории(
    ID NUMBER PRIMARY KEY ,
    Название VARCHAR2(255),
    Описание VARCHAR2(255)
);

-- Создание таблицы Пользователь
CREATE TABLE Пользователь (
    ID NUMBER PRIMARY KEY,
    Имя VARCHAR2(100),
    Фамилия VARCHAR2(255),
    Роль NUMBER REFERENCES Роль(ID),
	Данные VARCHAR2(255)
);

-- Создание таблицы Отзывы
CREATE TABLE Отзывы(
	ID_Пользователя NUMBER REFERENCES Пользователь(ID),
    ID NUMBER PRIMARY KEY,
    Текст VARCHAR2(255),
    Оценка NUMBER
);

-- Создание таблицы Запросы_В_Тех_Поддежку
CREATE TABLE Запросы_В_Тех_Поддежку(
	ID_Пользователя NUMBER REFERENCES Пользователь(ID),
    ID NUMBER PRIMARY KEY,
    Вопрос VARCHAR2(255),
    Статус NUMBER
);

-- Создание таблицы Товары
CREATE TABLE Товары(
    ID_Лота NUMBER PRIMARY KEY,
	ID_Пользователя NUMBER,
	ID_Категории NUMBER REFERENCES Категории(ID),
	Название VARCHAR2(255),
	Описание VARCHAR2(255),
    Цена FLOAT
);

-- Создание таблицы Сделки
CREATE TABLE Сделки(
    ID_Сделки NUMBER PRIMARY KEY,
	ID_Товара NUMBER REFERENCES Товары(ID_Лота),
	ID_Покупателя NUMBER REFERENCES Пользователь(ID),
	ID_Продавца NUMBER REFERENCES Пользователь(ID),
	Дата_и_время TIMESTAMP,
    Цена FLOAT
);

-- Представление для получения информации о сделках с именем и фамилией покупателя
CREATE VIEW Сделки_С_Покупателями AS
SELECT
    С.ID_Сделки,
    П.Имя AS Имя_Покупателя,
    П.Фамилия AS Фамилия_Покупателя,
    С.Дата_и_время,
    С.Цена
FROM
    Сделки С
JOIN
    Пользователь П ON С.ID_Покупателя = П.ID;

-- Функция для получения списка пользователей по роли
CREATE OR REPLACE FUNCTION fn_Пользователи_По_Роли(p_RoleID NUMBER)
RETURN SYS_REFCURSOR
AS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT ID AS ID_Пользователя, Имя, Фамилия, Данные
    FROM Пользователь
    WHERE Роль = p_RoleID;

    RETURN v_cursor;
END;
/

-- Функция для получения общей стоимости сделок для пользователя
CREATE OR REPLACE FUNCTION fn_Общая_Стоимость_Сделок(p_UserID NUMBER)
RETURN FLOAT
AS
    v_TotalPrice FLOAT := 0;
BEGIN
    SELECT SUM(Цена) INTO v_TotalPrice
    FROM Сделки
    WHERE ID_Покупателя = p_UserID OR ID_Продавца = p_UserID;

    RETURN v_TotalPrice;
END;
/

-- Функция для получения количества открытых запросов в техническую поддержку для пользователя
CREATE OR REPLACE FUNCTION fn_Количество_Открытых_Запросов(p_UserID NUMBER)
RETURN NUMBER
AS
    v_OpenRequestsCount NUMBER := 0;
BEGIN
    SELECT COUNT(*) INTO v_OpenRequestsCount
    FROM Запросы_В_Тех_Поддежку
    WHERE ID_Пользователя = p_UserID AND Статус = 1;

    RETURN v_OpenRequestsCount;
END;
/

-- Процедура для добавления нового пользователя
CREATE OR REPLACE PROCEDURE Добавить_Пользователя(
    p_Имя VARCHAR2,
    p_Фамилия VARCHAR2,
    p_Роль NUMBER,
    p_Данные VARCHAR2
)
AS
BEGIN
    INSERT INTO Пользователь (ID, Имя, Фамилия, Роль, Данные)
    VALUES (seq_Отзывы.NEXTVAL, p_Имя, p_Фамилия, p_Роль, p_Данные);
END;
/

-- Процедура для обновления товара
CREATE OR REPLACE PROCEDURE Обновить_Товар(
    p_ID_Лота INT,
    p_ID_Пользователя INT,
    p_ID_Категории INT,
    p_Цена FLOAT
)
AS
BEGIN
    UPDATE Товары
    SET
        ID_Пользователя = p_ID_Пользователя,
        ID_Категории = p_ID_Категории,
        Цена = p_Цена
    WHERE
        ID_Лота = p_ID_Лота;
END;
/

-- Процедура для закрытия запроса в техническую поддержку
CREATE OR REPLACE PROCEDURE Закрыть_Запрос_В_Тех_Поддежку(
    p_ID INT
)
AS
BEGIN
    UPDATE Запросы_В_Тех_Поддежку
    SET
        Статус = 0
    WHERE
        ID = p_ID;
END;
/

-- Создание индекса для ускорения поиска пользователей по их идентификаторам
CREATE INDEX IX_Пользователь_ID ON Пользователь(ID);

-- Создаем триггер trg_Добавление_Пользователя
CREATE OR REPLACE TRIGGER trg_Добавление_Пользователя
AFTER INSERT ON Пользователь
FOR EACH ROW
BEGIN
    -- Обновляем роль только что добавленного пользователя
    UPDATE Пользователь
    SET Роль = 0
    WHERE ID = :NEW.ID;
END;
