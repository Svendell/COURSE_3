-- Создание таблицы для товаров
CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR2(100),
    ProductCategory VARCHAR2(50),
    ProductPrice NUMBER(10, 2)
);

-- Создание таблицы для пользователей
CREATE TABLE Users (
    UserID INT PRIMARY KEY,
    UserName VARCHAR2(100),
    UserAddress VARCHAR2(255)
);

-- Создание таблицы для сделок
CREATE TABLE Deals (
    DealID INT PRIMARY KEY,
    UserID INT,
    ProductID INT,
    DealDate DATE,
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

-- Вставка данных в таблицу Products
INSERT INTO Products (ProductID, ProductName, ProductCategory, ProductPrice)
SELECT 1, 'Product A', 'Category X', 100.00 FROM DUAL UNION ALL
SELECT 2, 'Product B', 'Category Y', 150.00 FROM DUAL UNION ALL
SELECT 3, 'Product C', 'Category Z', 200.00 FROM DUAL UNION ALL
SELECT 4, 'Product D', 'Category X', 120.00 FROM DUAL UNION ALL
SELECT 5, 'Product E', 'Category Y', 180.00 FROM DUAL UNION ALL
SELECT 6, 'Product F', 'Category Z', 220.00 FROM DUAL UNION ALL
SELECT 7, 'Product G', 'Category X', 130.00 FROM DUAL UNION ALL
SELECT 8, 'Product H', 'Category Y', 170.00 FROM DUAL UNION ALL
SELECT 9, 'Product I', 'Category Z', 190.00 FROM DUAL UNION ALL
SELECT 10, 'Product J', 'Category X', 210.00 FROM DUAL;

-- Вставка данных в таблицу Users
INSERT INTO Users (UserID, UserName, UserAddress)
SELECT 101, 'User A', 'Address A' FROM DUAL UNION ALL
SELECT 102, 'User B', 'Address B' FROM DUAL UNION ALL
SELECT 103, 'User C', 'Address C' FROM DUAL UNION ALL
SELECT 104, 'User D', 'Address D' FROM DUAL UNION ALL
SELECT 105, 'User E', 'Address E' FROM DUAL UNION ALL
SELECT 106, 'User F', 'Address F' FROM DUAL UNION ALL
SELECT 107, 'User G', 'Address G' FROM DUAL UNION ALL
SELECT 108, 'User H', 'Address H' FROM DUAL UNION ALL
SELECT 109, 'User I', 'Address I' FROM DUAL UNION ALL
SELECT 110, 'User J', 'Address J' FROM DUAL;

-- Вставка данных в таблицу Deals


-- Вставка данных в таблицу Deals
INSERT INTO Deals (DealID, UserID, ProductID, DealDate)
SELECT 1, 101, 1, TO_DATE('2023-01-01', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 3, 103, 3, TO_DATE('2023-01-03', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 4, 104, 4, TO_DATE('2023-01-04', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 5, 105, 5, TO_DATE('2023-01-05', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 6, 106, 6, TO_DATE('2023-01-06', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 7, 107, 7, TO_DATE('2023-01-07', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 8, 108, 8, TO_DATE('2023-01-08', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 9, 109, 9, TO_DATE('2023-01-09', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 10, 110, 10, TO_DATE('2023-01-10', 'YYYY-MM-DD') FROM DUAL UNION ALL

SELECT 21, 101, 1, TO_DATE('2022-02-01', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 22, 102, 2, TO_DATE('2022-02-02', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 23, 103, 3, TO_DATE('2022-02-03', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 24, 104, 4, TO_DATE('2022-02-04', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 25, 101, 1, TO_DATE('2022-02-01', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 26, 102, 2, TO_DATE('2022-02-02', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 27, 103, 3, TO_DATE('2023-02-03', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 28, 104, 4, TO_DATE('2023-02-04', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 29, 105, 9, TO_DATE('2023-02-04', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 30, 106, 10, TO_DATE('2023-02-04', 'YYYY-MM-DD') FROM DUAL UNION ALL

SELECT 30, 106, 10, TO_DATE('2023-02-04', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 31, 101, 1, TO_DATE('2023-03-01', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 32, 102, 1, TO_DATE('2023-03-02', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 33, 103, 1, TO_DATE('2023-03-03', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 34, 104, 1, TO_DATE('2023-03-04', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 35, 105, 1, TO_DATE('2023-03-05', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 36, 106, 1, TO_DATE('2023-03-06', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 37, 107, 1, TO_DATE('2023-03-07', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 38, 108, 1, TO_DATE('2023-03-08', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 39, 109, 1, TO_DATE('2023-03-09', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 40, 109, 1, TO_DATE('2023-03-09', 'YYYY-MM-DD') FROM DUAL UNION ALL
 
SELECT 41, 101, 1, TO_DATE('2023-04-01', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 42, 102, 2, TO_DATE('2023-04-02', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 43, 103, 6, TO_DATE('2023-04-03', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 44, 104, 6, TO_DATE('2023-04-04', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 45, 105, 6, TO_DATE('2023-04-05', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 46, 106, 6, TO_DATE('2023-04-06', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 47, 107, 7, TO_DATE('2023-04-07', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 48, 108, 8, TO_DATE('2023-04-08', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 49, 109, 9, TO_DATE('2023-04-09', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 50, 109, 10, TO_DATE('2023-04-09', 'YYYY-MM-DD') FROM DUAL UNION ALL

SELECT 51, 101, 1, TO_DATE('2023-05-01', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 52, 102, 2, TO_DATE('2023-05-02', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 53, 103, 3, TO_DATE('2023-05-03', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 54, 104, 7, TO_DATE('2023-05-04', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 55, 105, 7, TO_DATE('2023-05-05', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 56, 106, 7, TO_DATE('2023-05-06', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 57, 107, 7, TO_DATE('2023-05-07', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 58, 108, 8, TO_DATE('2023-05-08', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 59, 109, 9, TO_DATE('2023-05-09', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 60, 109, 10, TO_DATE('2023-05-09', 'YYYY-MM-DD') FROM DUAL UNION ALL
 
SELECT 61, 101, 1, TO_DATE('2023-06-01', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 62, 102, 2, TO_DATE('2023-06-02', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 63, 103, 3, TO_DATE('2023-06-03', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 64, 104, 4, TO_DATE('2023-06-04', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 65, 105, 8, TO_DATE('2023-06-05', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 66, 106, 8, TO_DATE('2023-06-06', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 67, 107, 8, TO_DATE('2023-06-07', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 68, 108, 8, TO_DATE('2023-06-08', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 69, 109, 9, TO_DATE('2023-06-09', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 70, 109, 10, TO_DATE('2023-06-09', 'YYYY-MM-DD') FROM DUAL UNION ALL

SELECT 71, 101, 1, TO_DATE('2023-07-01', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 72, 102, 2, TO_DATE('2023-07-02', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 73, 103, 3, TO_DATE('2023-07-03', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 74, 104, 4, TO_DATE('2023-07-04', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 75, 105, 5, TO_DATE('2023-07-05', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 76, 106, 9, TO_DATE('2023-07-06', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 77, 107, 9, TO_DATE('2023-07-07', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 78, 108, 9, TO_DATE('2023-07-08', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 79, 109, 9, TO_DATE('2023-07-09', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 80, 109, 10, TO_DATE('2023-07-09', 'YYYY-MM-DD') FROM DUAL UNION ALL

SELECT 81, 101, 1, TO_DATE('2023-08-01', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 82, 102, 2, TO_DATE('2023-08-02', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 83, 103, 3, TO_DATE('2023-08-03', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 84, 104, 4, TO_DATE('2023-08-04', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 85, 105, 5, TO_DATE('2023-08-05', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 86, 106, 6, TO_DATE('2023-08-06', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 87, 107, 7, TO_DATE('2023-08-07', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 88, 108, 10, TO_DATE('2023-08-08', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 89, 109, 10, TO_DATE('2023-08-09', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 90, 109, 10, TO_DATE('2023-08-09', 'YYYY-MM-DD') FROM DUAL UNION ALL

SELECT 91, 101, 10, TO_DATE('2023-09-01', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 92, 102, 10, TO_DATE('2023-09-02', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 93, 103, 10, TO_DATE('2023-09-03', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 94, 104, 10, TO_DATE('2023-09-04', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 95, 105, 10, TO_DATE('2023-09-05', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 96, 106, 10, TO_DATE('2023-09-06', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 97, 107, 10, TO_DATE('2023-09-07', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 98, 108, 10, TO_DATE('2023-09-08', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 99, 109, 10, TO_DATE('2023-09-09', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 100, 109, 10, TO_DATE('2023-09-09', 'YYYY-MM-DD') FROM DUAL UNION ALL

SELECT 101, 101, 10, TO_DATE('2022-09-01', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 102, 102, 10, TO_DATE('2022-09-02', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 103, 103, 10, TO_DATE('2022-09-03', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 104, 104, 10, TO_DATE('2022-09-04', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 105, 105, 10, TO_DATE('2022-09-05', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 106, 106, 10, TO_DATE('2022-09-06', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 107, 107, 10, TO_DATE('2022-09-07', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 108, 108, 10, TO_DATE('2022-09-08', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 109, 109, 10, TO_DATE('2022-09-09', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 110, 109, 10, TO_DATE('2022-09-09', 'YYYY-MM-DD') FROM DUAL UNION ALL

SELECT 111, 101, 7, TO_DATE('2022-09-01', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 112, 102, 7, TO_DATE('2022-09-02', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 113, 103, 7, TO_DATE('2022-09-03', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 114, 104, 7, TO_DATE('2022-09-04', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 115, 105, 7, TO_DATE('2022-09-05', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 116, 106, 7, TO_DATE('2022-09-06', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 117, 107, 7, TO_DATE('2022-09-07', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 118, 108, 7, TO_DATE('2022-09-08', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 119, 109, 7, TO_DATE('2022-09-09', 'YYYY-MM-DD') FROM DUAL UNION ALL
SELECT 120, 109, 7, TO_DATE('2022-09-09', 'YYYY-MM-DD') FROM DUAL;



---------------------------------------------------
SELECT
    EXTRACT(YEAR FROM DealDate) AS "Year",
    EXTRACT(MONTH FROM DealDate) AS "Month",
    SUM(ProductPrice) AS MonthlySales,
    TO_CHAR(DealDate, 'Q') AS Quarter,
    SUM(SUM(ProductPrice)) OVER (PARTITION BY EXTRACT(YEAR FROM DealDate), TO_CHAR(DealDate, 'Q')) AS QuarterlySales,
    CASE WHEN EXTRACT(MONTH FROM DealDate) <= 6 THEN '1st Half' ELSE '2nd Half' END AS Half,
    SUM(SUM(ProductPrice)) OVER (PARTITION BY EXTRACT(YEAR FROM DealDate), CASE WHEN EXTRACT(MONTH FROM DealDate) <= 6 THEN 1 ELSE 2 END) AS HalfYearlySales,
    SUM(SUM(ProductPrice)) OVER (PARTITION BY EXTRACT(YEAR FROM DealDate)) AS YearlySales
FROM
    Deals
JOIN
    Products ON Deals.ProductID = Products.ProductID
GROUP BY
    EXTRACT(YEAR FROM DealDate), EXTRACT(MONTH FROM DealDate), TO_CHAR(DealDate, 'Q'), CASE WHEN EXTRACT(MONTH FROM DealDate) <= 6 THEN 1 ELSE 2 END
ORDER BY
    "Year", "Month";


----2
-- Функция для вычисления итогов предоставленных услуг за определенный период
SELECT
    DISTINCT EXTRACT(YEAR FROM DealDate) AS "Year",
    EXTRACT(MONTH FROM DealDate) AS "Month",
    SUM(ProductPrice) OVER(PARTITION BY EXTRACT(YEAR FROM DealDate), EXTRACT(MONTH FROM DealDate)) AS TotalDealAmount
FROM
    Deals
JOIN Products ON Deals.ProductID = Products.ProductID;



-- Функция для вычисления итогов предоставленных услуг за определенный период сравнение их с общим объемом услуг (в %) и сравнение с максимальным объемом услуг (в %)
DECLARE
    StartDate DATE := TO_DATE('2023-01-01', 'YYYY-MM-DD');
    EndDate DATE := TO_DATE('2023-12-31', 'YYYY-MM-DD');
    UserID INT := 101; -- Идентификатор конкретного пользователя
    TotalAmount DECIMAL(10, 2);
    MaxAmount DECIMAL(10, 2);
    UserTotalAmount DECIMAL(10, 2);
BEGIN
    -- Получаем общий объем всех сделок за указанный период
    SELECT SUM(P.ProductPrice)
    INTO TotalAmount
    FROM Deals D
    JOIN Products P ON D.ProductID = P.ProductID
    WHERE D.DealDate BETWEEN StartDate AND EndDate;

    -- Получаем максимальный объем всех сделок за указанный период
    SELECT MAX(TotalAmount)
    INTO MaxAmount
    FROM (
        SELECT SUM(P.ProductPrice) AS TotalAmount
        FROM Deals D
        JOIN Products P ON D.ProductID = P.ProductID
        WHERE D.DealDate BETWEEN StartDate AND EndDate
        GROUP BY EXTRACT(YEAR FROM D.DealDate), EXTRACT(MONTH FROM D.DealDate)
    );

    -- Вычисляем итоговую сумму сделок для конкретного пользователя за указанный период
    SELECT SUM(P.ProductPrice)
    INTO UserTotalAmount
    FROM Deals D
    JOIN Products P ON D.ProductID = P.ProductID
    JOIN Users U ON D.UserID = U.UserID
    WHERE D.DealDate BETWEEN StartDate AND EndDate
    AND U.UserID = UserID;

    -- Выводим результаты
    DBMS_OUTPUT.PUT_LINE('TotalDealAmount: ' || UserTotalAmount);
    DBMS_OUTPUT.PUT_LINE('PercentageOfTotal: ' || (UserTotalAmount * 100.0) / TotalAmount);
    IF MaxAmount > 0 THEN
        DBMS_OUTPUT.PUT_LINE('PercentageOfMax: ' || (UserTotalAmount * 100.0) / MaxAmount);
    ELSE
        DBMS_OUTPUT.PUT_LINE('PercentageOfMax: 0');
    END IF;
END;
/


-- Функция для применения функции ранжирования ROW_NUMBER() для разбиения результатов запроса на страницы (по 20 строк на каждую страницу)
SELECT *
FROM (
    SELECT *,
           ROW_NUMBER() OVER (ORDER BY DealID) AS RowNum,
           CEIL(ROW_NUMBER() OVER (ORDER BY DealID) / 20) AS PageNumber
    FROM Deals
) NumberedDeals
WHERE PageNumber = 1;


-- Функция для применения функции ранжирования ROW_NUMBER() для удаления дубликатов
WITH RankedRows AS (
    SELECT *,  ROW_NUMBER() OVER (PARTITION BY UserID, DealDate, ProductID ORDER BY DealID) AS RowNum
    FROM Deals
)
SELECT *
FROM RankedRows
WHERE RowNum = 1
ORDER BY DealID;


-- Функция для возвращения для каждого пользователя последних 3 сделок
WITH RankedDeals AS (
    SELECT *, ROW_NUMBER() OVER (PARTITION BY UserID ORDER BY DealDate DESC) AS RowNum
    FROM Deals
)
SELECT DealID, UserID, ProductID, DealDate
FROM RankedDeals
WHERE RowNum <= 3;



-- Функция для нахождения наиболее популярного продукта
WITH ProductSales AS (
    SELECT
        P.ProductID,
        P.ProductName,
        COUNT(*) AS TotalSales,
        ROW_NUMBER() OVER (PARTITION BY P.ProductID ORDER BY COUNT(*) DESC) AS Rank
    FROM Deals D
    JOIN Products P ON D.ProductID = P.ProductID
    GROUP BY
        P.ProductID,
        P.ProductName
)
SELECT ProductID,ProductName,TotalSales
FROM  ProductSales
WHERE  Rank = 1;
